<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Piyush Bansal</title><link href="/" rel="alternate"></link><link href="/feeds/Code.atom.xml" rel="self"></link><id>/</id><updated>2014-01-31T16:00:00+05:30</updated><entry><title>Seinfeld method and coding</title><link href="/seinfeld-method-and-coding.html" rel="alternate"></link><updated>2014-01-31T16:00:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2014-01-31:seinfeld-method-and-coding.html</id><summary type="html">&lt;p&gt;This presentation focuses on using the Seinfeld method &amp;#8220;Don&amp;#8217;t break the chain&amp;#8221;
to get going with personal projects. Those could be all types of things from
learning the piano, a new programming language or achieving a personal&amp;nbsp;goal.&lt;/p&gt;
&lt;p&gt;I believe that the Seinfeld method can help break down some of the blockers
that we experience when procrastinating, by forcing us to refactor large,
unmeasurable and daunting tasks into mini-tasks which are the opposite -
achievable, simple and regular. It also helps us to refocus on continual small
steps rather than the big&amp;nbsp;picture.&lt;/p&gt;
&lt;br&gt;
&lt;script async class="speakerdeck-embed" data-id="bdabe0106c8c013162a91ed72f379050" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;br&gt;&lt;p&gt;I&amp;#8217;m especially keen on how the regular measurement of time spent on a project
can give insight, and so I&amp;#8217;ve started combining Seinfeld with Pomodoro&amp;nbsp;Technique.&lt;/p&gt;
&lt;p&gt;The most important thing is to &amp;#8220;make it work for you&amp;#8221; - there are all sorts of
ways that these techniques can be used to push a project forward or help you to
achieve your&amp;nbsp;goal.&lt;/p&gt;
&lt;p&gt;Hope that&amp;#8217;s&amp;nbsp;helpful!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="http://ustwo.com/"&gt;Victor at ustwo London&lt;/a&gt; for asking me to talk
at their Tech&amp;nbsp;Thursday.&lt;/p&gt;
&lt;p&gt;Read more on &lt;a class="reference external" href="http://lifehacker.com/281626/jerry-seinfelds-productivity-secret"&gt;Seinfeld Technique&lt;/a&gt; and
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro Technique&lt;/a&gt;. I&amp;#8217;m
currently using &lt;a class="reference external" href="http://tomatoi.st/"&gt;tomatoist&lt;/a&gt; as my online pomodoro&amp;nbsp;timer.&lt;/p&gt;
</summary></entry><entry><title>Python generators and yield</title><link href="/python-generators-and-yield.html" rel="alternate"></link><updated>2013-12-14T16:00:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-12-14:python-generators-and-yield.html</id><summary type="html">&lt;p&gt;Last week in an interview for a Django developer job, I was&amp;nbsp;asked:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
What is the type of thing?&lt;/blockquote&gt;
&lt;p&gt;Although I was able to identify that the type is dependent on the &lt;cite&gt;()&lt;/cite&gt; around
the list-comprehension-like-construction, I didn&amp;#8217;t know the exact type that
&lt;cite&gt;thing&lt;/cite&gt; would&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;The answer is a &lt;strong&gt;generator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This post shows some of the functionalities of generators and how they can
be used in Python control&amp;nbsp;flow.&lt;/p&gt;
&lt;div class="section" id="generator-expressions"&gt;
&lt;h2&gt;Generator&amp;nbsp;expressions&lt;/h2&gt;
&lt;p&gt;Generators can be created with generator expressions. A generator expression is
a bit like a list comprehension. List Comprehension uses square brackets
&lt;cite&gt;[]&lt;/cite&gt;. In&amp;nbsp;Python&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&lt;/pre&gt;
&lt;p&gt;A generator expression is a shortcut that allows generators to be created
easily with a similar syntax - this time it&amp;#8217;s using parentheses &lt;cite&gt;()&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x2fa5eb0&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="generators-are-iterators"&gt;
&lt;h2&gt;Generators are&amp;nbsp;iterators&lt;/h2&gt;
&lt;p&gt;Generators &amp;#8220;provide a convenient way to implement the iterator&amp;nbsp;protocol&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In Python, an &lt;a class="reference external" href="http://docs.python.org/2.7/library/stdtypes.html#typeiter"&gt;iterator&lt;/a&gt; provides two key
functions, &lt;cite&gt;__iter__&lt;/cite&gt; and &lt;cite&gt;next&lt;/cite&gt;, so a generator itself must provide these two&amp;nbsp;functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__iter__&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;genexpr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x293c3c0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;cite&gt;__iter__&lt;/cite&gt; is there and returns the generator, now for &lt;cite&gt;next&lt;/cite&gt;&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Therefore &lt;cite&gt;next&lt;/cite&gt; works. We can keep hitting&amp;nbsp;until&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;81&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;StopIteration&lt;/span&gt;                             &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b28d59f370d8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;zzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;cite&gt;StopIteration&lt;/cite&gt; is raised - so the generator does everything we&amp;#8217;d expect it
to by the iterator&amp;nbsp;protocol.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-a-generator-with-yield"&gt;
&lt;h2&gt;Building a generator with&amp;nbsp;yield&lt;/h2&gt;
&lt;p&gt;Although it&amp;#8217;s not clear from the example above, a generator is able to
relinquish control and return a value - while saving its state. It then allows
the control to pass back to the structure that called it, until it&amp;#8217;s called
again, picking up where it left&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;This allows for loops over sets of values to be programmed, without the full
list of values being calculated first. A generator can be used so that &lt;cite&gt;next&lt;/cite&gt;
is called before each iteration&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;In this way, only the values required for each iteration need to be&amp;nbsp;computed.&lt;/p&gt;
&lt;div class="section" id="the-yield-keyword-simple-example"&gt;
&lt;h3&gt;The yield keyword - simple&amp;nbsp;example&lt;/h3&gt;
&lt;p&gt;Adding &lt;cite&gt;yield&lt;/cite&gt; to a function allows for generators to be constructed&amp;nbsp;&amp;#8216;manually&amp;#8217;.&lt;/p&gt;
&lt;p&gt;At its very simplest, a function could be written just to generate a single
value. However, to show that a generator can return to its previous state when
called again, let&amp;#8217;s make one with two values. For&amp;nbsp;example&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;two_things&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can make an instance of the&amp;nbsp;generator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_things&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;two_things&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_things&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;two_things&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x31d0960&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we can ask for next&amp;nbsp;value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_things&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now when we call &lt;cite&gt;next&lt;/cite&gt; again, our generator continues from the state of the
last&amp;nbsp;yield.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;my_things&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you see how different values can be returned, one after the&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;And after that second thing, the generator now raises a &lt;cite&gt;StopIteration&lt;/cite&gt;, since
it has no further values to&amp;nbsp;return.&lt;/p&gt;
&lt;p&gt;Since a generator implements the iterator protocol, it can be used in a &lt;cite&gt;for&lt;/cite&gt;
statement and therefore in a list comprehension. This makes for a convenient
way to check the values of a limited generator like this&amp;nbsp;one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;two_things&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="more-complex-example-with-yield"&gt;
&lt;h3&gt;More complex example with&amp;nbsp;yield&lt;/h3&gt;
&lt;p&gt;So let&amp;#8217;s write Fibonacci as a generator. I&amp;#8217;m going to start with doctests to
create the definition of the function, then put the code at the&amp;nbsp;end.&lt;/p&gt;
&lt;p&gt;What I like about the doctests in this example is that in 3 &lt;cite&gt;fib&lt;/cite&gt; is tested
with &lt;cite&gt;next&lt;/cite&gt;, but in 4 it&amp;#8217;s tested using a list&amp;nbsp;comprehension.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sd"&gt;    1.  Creates a generator&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; type(fib(0))&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;lt;type &amp;#39;generator&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class="sd"&gt;    2.  fib(0) just generates 0th value (1)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; zero_fib = fib(0)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; zero_fib.next()&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; zero_fib.next()&lt;/span&gt;
&lt;span class="sd"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span class="sd"&gt;    ...&lt;/span&gt;
&lt;span class="sd"&gt;    StopIteration&lt;/span&gt;

&lt;span class="sd"&gt;    3.  fib(1) creates a generator that creates 0th (1) and 1st (1) values of&lt;/span&gt;
&lt;span class="sd"&gt;        fib seq&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; one_fib = fib(1)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; one_fib.next()&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; one_fib.next()&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; one_fib.next()&lt;/span&gt;
&lt;span class="sd"&gt;    Traceback (most recent call last):&lt;/span&gt;
&lt;span class="sd"&gt;    ...&lt;/span&gt;
&lt;span class="sd"&gt;    StopIteration&lt;/span&gt;

&lt;span class="sd"&gt;    4.  fib(10) generates the first 10 fibonacci numbers&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; [x for x in fib(10)]&lt;/span&gt;
&lt;span class="sd"&gt;    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;

        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s all - have fun with&amp;nbsp;generators!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Git: To squash or not to squash?</title><link href="/git-to-squash-or-not-to-squash.html" rel="alternate"></link><updated>2013-11-19T11:00:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-11-19:git-to-squash-or-not-to-squash.html</id><summary type="html">&lt;p&gt;Over the weekend I spotted a tweet from &lt;a class="reference external" href="http://oli.me.uk/"&gt;Oliver&lt;/a&gt;&amp;#8230;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;To squash features into develop, or not to squash features into&amp;nbsp;develop?&lt;/p&gt;&amp;mdash; Oliver Caldwell (@OliverCaldwell) &lt;a href="https://twitter.com/OliverCaldwell/statuses/401299558887485440"&gt;November 15, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;And I jumped straight in&amp;nbsp;with&amp;#8230;&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/OliverCaldwell"&gt;@OliverCaldwell&lt;/a&gt; Squash, but keep detailed commit messages. Unless you have a particular use-case / reason not&amp;nbsp;to.&lt;/p&gt;&amp;mdash; James Cooke (@jamesfublo) &lt;a href="https://twitter.com/jamesfublo/statuses/402123985791369216"&gt;November 17, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;Then, as part of our following &lt;a class="reference external" href="https://twitter.com/OliverCaldwell/statuses/401299558887485440"&gt;conversation&lt;/a&gt;, I drew a&amp;nbsp;picture:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/OliverCaldwell"&gt;@OliverCaldwell&lt;/a&gt; This is how I see it. Better to keep the direct route rather than the &amp;#8220;how we got here&amp;#8221;. &lt;a href="http://t.co/X5FZQ1euoU"&gt;pic.twitter.com/X5FZQ1euoU&lt;/a&gt;&lt;/p&gt;&amp;mdash; James Cooke (@jamesfublo) &lt;a href="https://twitter.com/jamesfublo/statuses/402407321265274881"&gt;November 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;But&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="it-s-about-more-than-just-squashing"&gt;
&lt;h2&gt;It&amp;#8217;s about more than just&amp;nbsp;squashing&lt;/h2&gt;
&lt;p&gt;What I realised while writing this post and experimenting with &lt;cite&gt;git&lt;/cite&gt; is that
the issue is not as simple as &amp;#8220;Squash? Yes /&amp;nbsp;No?&amp;#8221;&lt;/p&gt;
&lt;p&gt;Variables to consider&amp;nbsp;include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;How you record your commit messages on your squashed commit.&lt;/strong&gt; This effects
the impact of history loss - good commit messages and or external ticketing /
dev tracking mean it&amp;#8217;s less&amp;nbsp;important.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whether you push your feature branches for other developers, or between your
dev boxes, to share.&lt;/strong&gt; Do you need to keep the shared history between&amp;nbsp;machines?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The velocity of your project.&lt;/strong&gt; How long do you need to keep history for?
Do bugs show up&amp;nbsp;regularly?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="tl-dr-simple-project-squash-yes"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt; Simple project. Squash =&amp;nbsp;Yes&lt;/h2&gt;
&lt;p&gt;For a simple project with no sharing between devs required and regular
releases, then squashing features seems like a good idea if&amp;nbsp;you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Keep detailed commit messages when you&amp;nbsp;squash.&lt;/li&gt;
&lt;li&gt;Use &lt;cite&gt;git rebase&lt;/cite&gt; to squash your features&amp;#8217; commits into a candidate branch and
merge that in to &lt;cite&gt;dev&lt;/cite&gt; or &lt;cite&gt;master&lt;/cite&gt; depending on your &lt;span class="caps"&gt;SCM&lt;/span&gt;&amp;nbsp;strategy.&lt;/li&gt;
&lt;li&gt;Only push your squashed features to keep &lt;cite&gt;origin&lt;/cite&gt; clean and easy to&amp;nbsp;understand.&lt;/li&gt;
&lt;li&gt;Keep your feature branches if you want. But, if you delete them &lt;cite&gt;git&lt;/cite&gt; will
keep your commits in the reflog for 30 days by&amp;nbsp;default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="keeping-a-detailed-history"&gt;
&lt;h2&gt;Keeping a detailed&amp;nbsp;history&lt;/h2&gt;
&lt;p&gt;One of the issues that Oliver raised was about losing&amp;nbsp;history.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/jamesfublo"&gt;@jamesfublo&lt;/a&gt; I suppose so. Squashing just feels like you&amp;#39;re killing off that fine grained history, like when was that two line change&amp;nbsp;made.&lt;/p&gt;&amp;mdash; Oliver Caldwell (@OliverCaldwell) &lt;a href="https://twitter.com/OliverCaldwell/statuses/402394094111977472"&gt;November 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;So, since I advocate squashing and branch deletion, I&amp;#8217;m therefore suggesting
that the &lt;strong&gt;reflog is used to recover detailed history in the local repository&lt;/strong&gt;
if&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;So let&amp;#8217;s explore how much history is actually&amp;nbsp;kept&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/git-reflog"&gt;From the docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Reflog is a mechanism to record when the tip of branches are updated.&lt;/blockquote&gt;
&lt;p&gt;This means&amp;nbsp;that&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Every commit that every branch in your local repostitory has ever pointed to
is kept in the&amp;nbsp;reflog.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And this even includes branch&amp;nbsp;switching&amp;#8230;&lt;/p&gt;
&lt;blockquote&gt;
&lt;span class="caps"&gt;HEAD&lt;/span&gt; reflog records branch switching as well.&lt;/blockquote&gt;
&lt;p&gt;Sounds very warm and cozy, &lt;strong&gt;&lt;span class="caps"&gt;BUT&lt;/span&gt;&lt;/strong&gt; there are conditions, so let&amp;#8217;s do a
practical experiment with a test&amp;nbsp;repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="experiment-squashing-with-rebase-and-keeping-history"&gt;
&lt;h2&gt;Experiment: Squashing with rebase and keeping&amp;nbsp;history&lt;/h2&gt;
&lt;p&gt;Make a repository with an initial&amp;nbsp;commit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a &lt;cite&gt;&lt;span class="caps"&gt;README&lt;/span&gt;.md&lt;/cite&gt; file and put a line of text into it and commit - this
commit is called&amp;nbsp;A.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat &amp;gt; &lt;span class="caps"&gt;README&lt;/span&gt;.md
First line of readme file
^C
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="caps"&gt;README&lt;/span&gt;.md
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Current &lt;cite&gt;git&lt;/cite&gt; tree&amp;nbsp;status:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A   &amp;lt;-master
&lt;/pre&gt;
&lt;div class="section" id="work-on-feature"&gt;
&lt;h3&gt;Work on&amp;nbsp;feature&lt;/h3&gt;
&lt;p&gt;In a new branch, we create a &lt;em&gt;feature&lt;/em&gt; to update the &lt;span class="caps"&gt;README&lt;/span&gt; with two new lines
and to delete the first&amp;nbsp;line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout -b feature-a

&lt;span class="c"&gt;# First feature commit (B)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cat &amp;gt;&amp;gt; &lt;span class="caps"&gt;README&lt;/span&gt;.md
Add a second line
^C
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="caps"&gt;README&lt;/span&gt;.md
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit

&lt;span class="c"&gt;# Second feature commit (C)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;cat &amp;gt;&amp;gt; &lt;span class="caps"&gt;README&lt;/span&gt;.md
Add a third line
^C
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="caps"&gt;README&lt;/span&gt;.md
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit

&lt;span class="c"&gt;# Third feature commit (D)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vim &lt;span class="caps"&gt;README&lt;/span&gt;.md
&lt;span class="c"&gt;# Remove first line and save&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="caps"&gt;README&lt;/span&gt;.md
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Current &lt;cite&gt;git&lt;/cite&gt; tree&amp;nbsp;status:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A   &amp;lt;-master
 \
  B--C--D   &amp;lt;-feature-a
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="check-progress-in-reflog"&gt;
&lt;h3&gt;Check progress in&amp;nbsp;reflog&lt;/h3&gt;
&lt;p&gt;Checkout &lt;cite&gt;master&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s check the&amp;nbsp;reflog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
8e48d1d HEAD&amp;#64;{0}: checkout: moving from feature-a to master
262057a HEAD&amp;#64;{1}: commit: D: Remove first line
9efbf73 HEAD&amp;#64;{2}: commit: C: Add a third line
f2503d5 HEAD&amp;#64;{3}: commit: B: Add a second line
8e48d1d HEAD&amp;#64;{4}: checkout: moving from master to feature-a
8e48d1d HEAD&amp;#64;{5}: commit (initial): Make readme
&lt;/pre&gt;
&lt;p&gt;Newest stuff pops out&amp;nbsp;first:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt;&amp;#64;{0}&lt;/cite&gt; - Checkout from &lt;cite&gt;feature-a&lt;/cite&gt; to &lt;cite&gt;master&lt;/cite&gt; is&amp;nbsp;recorded.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt;&amp;#64;{1}&lt;/cite&gt; to &lt;cite&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt;&amp;#64;{3}&lt;/cite&gt; - our &lt;cite&gt;feature-a&lt;/cite&gt; commits (D, C and&amp;nbsp;B).&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt;&amp;#64;{4}&lt;/cite&gt; - Checkout of the &lt;cite&gt;feature-a&lt;/cite&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;&lt;span class="caps"&gt;HEAD&lt;/span&gt;&amp;#64;{5}&lt;/cite&gt; - Initial&amp;nbsp;commit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="squash-commits-into-candidate-branch"&gt;
&lt;h3&gt;Squash commits into candidate&amp;nbsp;branch&lt;/h3&gt;
&lt;p&gt;&lt;cite&gt;feature-a&lt;/cite&gt; is ready to bring into &lt;cite&gt;master&lt;/cite&gt;. Let&amp;#8217;s first cleanup our history by
doing an interactive rebase. We use a candidate branch for this work because
it&amp;#8217;s a nice safety net which can help with&amp;nbsp;testing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout feature-a
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout -b feature-a-candidate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Current &lt;cite&gt;git&lt;/cite&gt; tree&amp;nbsp;status:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A   &amp;lt;-master
 \
  B--C--D   &amp;lt;-feature-a &amp;lt;-feature-a-candidate
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase --interactive master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#8217;s squash our three commits into&amp;nbsp;one.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pick f2503d5 B: Add a second line
squash 9efbf73 C: Add a third line
squash 262057a D: Remove first line
&lt;/pre&gt;
&lt;p&gt;And now we merge together the three commits, describing the activity that took
place. We keep the messages so that history is clean, but informative. We also
include a reference to the ticket we are working&amp;nbsp;against:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Updating README.md as per #ticket

* Add a second line
* Add a third line
* Remove first line
&lt;/pre&gt;
&lt;p&gt;Check reflog&amp;nbsp;again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
d0445b2 HEAD&amp;#64;{0}: rebase -i (finish): returning to refs/heads/feature-a-candidat
d0445b2 HEAD&amp;#64;{1}: rebase -i (squash): Updating README.md as per #ticket
362b6ef HEAD&amp;#64;{2}: rebase -i (squash): # This is a combination of 2 commits.
f2503d5 HEAD&amp;#64;{3}: checkout: moving from feature-a-candidate to f2503d5
262057a HEAD&amp;#64;{4}: checkout: moving from feature-a to feature-a-candidate
&lt;/pre&gt;
&lt;p&gt;The reflog shows us that there is a new commit &lt;cite&gt;d0445b2&lt;/cite&gt;, we&amp;#8217;ll call this &lt;cite&gt;E&lt;/cite&gt;.
This is the commit that results from the rebase and leaves the tree looking&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A   &amp;lt;-master
|\
| B--C--D   &amp;lt;-feature-a
\
 \
  E   &amp;lt;-feature-a-candidate
&lt;/pre&gt;
&lt;p&gt;This is a good stage to test everything &lt;strong&gt;and&lt;/strong&gt; to check that your tests are
what you expect them to be, ensure that no information has been&amp;nbsp;lost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="merge-onto-master"&gt;
&lt;h3&gt;Merge onto&amp;nbsp;master&lt;/h3&gt;
&lt;p&gt;The new commit &lt;cite&gt;E&lt;/cite&gt; is the patch for our &lt;em&gt;feature&lt;/em&gt; which we now merge onto
&lt;cite&gt;master&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git merge feature-a-candidate master
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
Updating 8e48d1d..d0445b2
Fast-forward
 README.md | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)
&lt;/pre&gt;
&lt;p&gt;The&amp;nbsp;tree:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A--E   &amp;lt;-master &amp;lt;-feature-a-candidate
 \
  B--C--D   &amp;lt;-feature-a
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="push"&gt;
&lt;h3&gt;Push&lt;/h3&gt;
&lt;p&gt;At this stage the &lt;em&gt;feature&lt;/em&gt; would usually be pushed to a branch on &lt;cite&gt;origin&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we&amp;#8217;ve only shared the squashed &lt;cite&gt;E&lt;/cite&gt; commit, not &lt;cite&gt;B&lt;/cite&gt;, &lt;cite&gt;C&lt;/cite&gt; or &lt;cite&gt;D&lt;/cite&gt; in the
&lt;cite&gt;feature-a&lt;/cite&gt; branch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cleanup"&gt;
&lt;h3&gt;Cleanup&lt;/h3&gt;
&lt;p&gt;We can then cleanup our working branches. First the&amp;nbsp;candidate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git branch -d feature-a-candidate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This leaves us with a tree&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A--E   &amp;lt;-master
 \
  B--C--D   &amp;lt;-feature-a
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="keeping-history"&gt;
&lt;h2&gt;Keeping&amp;nbsp;history&lt;/h2&gt;
&lt;p&gt;As Oliver noted, the &lt;cite&gt;feature-a&lt;/cite&gt; branch can just be kept by the developer in
their local repository to preserve the full history - that is certainly an&amp;nbsp;option.&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" lang="en"&gt;&lt;p&gt;&lt;a href="https://twitter.com/jamesfublo"&gt;@jamesfublo&lt;/a&gt; I suppose you can still keep the unsquashed branches in the repository. I never used to squash, but I might&amp;nbsp;start.&lt;/p&gt;&amp;mdash; Oliver Caldwell (@OliverCaldwell) &lt;a href="https://twitter.com/OliverCaldwell/statuses/402401798738018304"&gt;November 18, 2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;However, I prefer a clean working repository so I like to delete the
&lt;cite&gt;feature-a&lt;/cite&gt; branch.&lt;/p&gt;
&lt;div class="section" id="clean-up-the-feature-branch"&gt;
&lt;h3&gt;Clean up the feature&amp;nbsp;branch&lt;/h3&gt;
&lt;p&gt;When deleting the &lt;cite&gt;feature-a&lt;/cite&gt; branch &lt;cite&gt;git&lt;/cite&gt; requires the &lt;cite&gt;-D&lt;/cite&gt; flag to force the
deletion. &lt;cite&gt;git&lt;/cite&gt; does not &lt;em&gt;work out&lt;/em&gt; that &lt;cite&gt;E&lt;/cite&gt; is &lt;em&gt;equal&lt;/em&gt; to &lt;cite&gt;B&lt;/cite&gt;, &lt;cite&gt;C&lt;/cite&gt; and &lt;cite&gt;D&lt;/cite&gt;
combined, so thinks that history could be&amp;nbsp;lost.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git branch -D feature-a
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
Deleted branch feature-a (was 262057a)
&lt;/pre&gt;
&lt;p&gt;This leaves a tree&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A--E   &amp;lt;-master
 \
  B--C--D
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="b-c-and-d-are-now-hanging-commits"&gt;
&lt;h3&gt;B, C and D are now hanging&amp;nbsp;commits&lt;/h3&gt;
&lt;p&gt;Check&amp;nbsp;reflog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a part of&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
...
262057a HEAD&amp;#64;{12}: commit: D: Remove first line
9efbf73 HEAD&amp;#64;{13}: commit: C: Add a third line
f2503d5 HEAD&amp;#64;{14}: commit: B: Add a second line
...
&lt;/pre&gt;
&lt;p&gt;The development commits from the &lt;em&gt;feature&lt;/em&gt; development are still available and
could be checked out into &lt;em&gt;detached &lt;span class="caps"&gt;HEAD&lt;/span&gt;&lt;/em&gt; state and inspected, played with,
rebranched. Let&amp;#8217;s try&amp;nbsp;that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout 262057a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now play and explore as much as you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;When you&amp;#8217;re ready, move back to &lt;cite&gt;master&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;cite&gt;git&lt;/cite&gt; warns us that we&amp;#8217;ve left behind our hanging&amp;nbsp;commits:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Warning: you are leaving 3 commits behind, not connected to
any of your branches:

  262057a D: Remove first line
  9efbf73 C: Add a third line
  f2503d5 B: Add a second line

If you want to keep them by creating a new branch, this may be a good time
to do so with:

 git branch new_branch_name 262057a
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-long-are-hanging-commits-kept"&gt;
&lt;h2&gt;How long are hanging commits&amp;nbsp;kept?&lt;/h2&gt;
&lt;p&gt;But how long will these unreachable commits &lt;em&gt;hang&lt;/em&gt; around&amp;nbsp;for?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We can&amp;nbsp;decide!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hanging commits are removed from the local repository by garbage collection,
known as &lt;cite&gt;gc&lt;/cite&gt;, or by manual&amp;nbsp;removal.&lt;/p&gt;
&lt;p&gt;There are various settings which &lt;cite&gt;gc&lt;/cite&gt; will use to determine which commits
should be cleaned before the repository is&amp;nbsp;repacked.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;gc.reflogExpireUnreachable&lt;/cite&gt; tells &lt;cite&gt;gc&lt;/cite&gt; how long hanging commits should be left
in the repository. Default value is 30 days. Adjust this to a value that you
feel comfortable with. You can make that setting on any of the normal levels -
global, system or&amp;nbsp;local.&lt;/p&gt;
&lt;p&gt;Hey - you want to keep all history in the reflog for ever? Here&amp;#8217;s a&amp;nbsp;setting:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[gc]
    reflogExpire = never
    reflogExpireUnreachable = never
&lt;/pre&gt;
&lt;p&gt;I&amp;#8217;m happy with the 30 day default&amp;nbsp;myself!&lt;/p&gt;
&lt;p&gt;For more detailed explanation, checkout the Configuration section of the
&lt;cite&gt;git-gc&lt;/cite&gt; man&amp;nbsp;page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-manual-clean"&gt;
&lt;h2&gt;A manual&amp;nbsp;clean&lt;/h2&gt;
&lt;p&gt;Just for experimention, I tried to clean the repository of the &lt;cite&gt;B&lt;/cite&gt;, &lt;cite&gt;C&lt;/cite&gt; and &lt;cite&gt;D&lt;/cite&gt;
hanging commits. This was challenging because my default settings prevented
reflog and &lt;cite&gt;gc&lt;/cite&gt; from performing the clean, however I found &lt;a class="reference external" href="http://stackoverflow.com/a/14995269/1286705"&gt;this &lt;span class="caps"&gt;SO&lt;/span&gt; answer
helpful&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog expire --all --expire-unreachable&lt;span class="o"&gt;=&lt;/span&gt;0
&lt;span class="nv"&gt;$ &lt;/span&gt;git repack -A -d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Repacking occurred. Now check&amp;nbsp;reflog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git reflog
&lt;/pre&gt;&lt;/div&gt;
&lt;pre class="literal-block"&gt;
d0445b2 HEAD&amp;#64;{0}: merge feature-a-candidate: Fast-forward
8e48d1d HEAD&amp;#64;{1}: checkout: moving from feature-a-candidate to master
d0445b2 HEAD&amp;#64;{2}: rebase -i (finish): returning to refs/heads/feature-a-candidat
d0445b2 HEAD&amp;#64;{3}: checkout: moving from master to feature-a
8e48d1d HEAD&amp;#64;{4}: commit (initial): Make readme
&lt;/pre&gt;
&lt;p&gt;There are now only two commits in the&amp;nbsp;repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;8e48d1d&lt;/cite&gt; - Initial commit &lt;cite&gt;A&lt;/cite&gt; &amp;#64; 1 and&amp;nbsp;4.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;d0445b2&lt;/cite&gt; - Feature commit &lt;cite&gt;E&lt;/cite&gt; made by the rebase &amp;#64; 0, 2 and&amp;nbsp;3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cleaned repository now looks&amp;nbsp;like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
A--E   &amp;lt;-master
&lt;/pre&gt;
&lt;p&gt;So fresh and so&amp;nbsp;clean!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;At the end of the day, the dev team (even if that&amp;#8217;s just you on a weekend
project) decides how best to keep history and share&amp;nbsp;features.&lt;/p&gt;
&lt;p&gt;My general solution is&amp;nbsp;for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Squashed single-commit&amp;nbsp;features.&lt;/li&gt;
&lt;li&gt;Detailed commit messages created at &lt;em&gt;squash-time&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Devs keep more history locally, either with branches or in a long-life&amp;nbsp;reflog.&lt;/li&gt;
&lt;li&gt;Devs backup their repositories and don&amp;#8217;t rely on &lt;cite&gt;origin&lt;/cite&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember there can be a full 30 day history (or longer depending on the
&lt;cite&gt;gc.reflogExpireUnreachable&lt;/cite&gt; setting) in the local repo which hasn&amp;#8217;t been
pushed to &lt;cite&gt;origin&lt;/cite&gt;. It&amp;#8217;s this history that could save your bacon one day - so
consider backing it&amp;nbsp;up!&lt;/p&gt;
&lt;p&gt;Happy source code&amp;nbsp;management!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="git"></category></entry><entry><title>Things to remember about decorators</title><link href="/things-to-remember-about-decorators.html" rel="alternate"></link><updated>2013-10-22T20:00:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-10-22:things-to-remember-about-decorators.html</id><summary type="html">&lt;p&gt;After an interview question about Python decorators which I stumbled over, I
promised myself that I would improve my knowledge of this metaprogramming&amp;nbsp;technique.&lt;/p&gt;
&lt;p&gt;These are my notes to myself on decorators - maybe they&amp;#8217;ll be helpful to
someone else who&amp;#8217;s improving their knowledge of decorators&amp;nbsp;too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is pure Pythonic syntatic&amp;nbsp;sugar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is a Python callable that receives the decorated function and
returns a new function in its&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;For example, if there is a decorator called &lt;cite&gt;my_decorator&lt;/cite&gt; and we want to
decorate &lt;cite&gt;my_func&lt;/cite&gt; then&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@my_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is equivalent to&amp;nbsp;writing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The decorator callable is executed at load time, not at execution time. Here
is an example of a silly decorator that prints &amp;#8220;Hello World&amp;#8221; when the Python
file is loaded - there is nothing else in the&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;hello.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@say_hello&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# Do nothing just return&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run it on the command line, and &amp;#8220;Hello World&amp;#8221; appears when the &lt;cite&gt;nothing&lt;/cite&gt;
function is&amp;nbsp;decorated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python hello.py
Hello World
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When writing a decorator, remember to patch over the docstring of the wrapped
function. This can be done by accessing the passed function&amp;#8217;s &lt;cite&gt;__doc__&lt;/cite&gt;
attribute. Failing to do so will prevent doctest from testing the decorated&amp;nbsp;function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Pass through the doc string&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt; This is actually far better done with the &lt;cite&gt;wraps&lt;/cite&gt; decorator from
the &lt;cite&gt;functools&lt;/cite&gt; modules, which fixes the &lt;cite&gt;__name__&lt;/cite&gt; and &lt;cite&gt;__doc__&lt;/cite&gt; attributes
to what we&amp;#8217;d expect them to&amp;nbsp;be.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Found on &lt;a class="reference external" href="http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/"&gt;Improve your Python&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When unit testing decorators, one strategy can be to manually call the
decorator on a mocked object and inspect how it interacts with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a caching function which is used to speed up the Fibonacci&amp;nbsp;series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Keep a dict of values returned already&lt;/span&gt;
    &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now use the cache function as a&amp;nbsp;decorator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@cache&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fibonacci series&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(2)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Must be greater than 0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#8217;s a unittest that asserts that the cache function only allows calls
through when there is no value saved in the &lt;cite&gt;vals&lt;/cite&gt; dict.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCashDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;my_fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# First call gives a call count of 1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Second call keeps the call count at 1 - the cached value is used&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Subsequent call with a new value increased the call count&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure the scope of variables used in the decorators is correct, this is
&lt;a class="reference external" href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"&gt;an interesting article by Simeon Franklin about decorators and scope&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If in doubt, extend any tests to test a second decorated function and ensure
that the two functions do not effect each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;Below is a test that aims to check that cache dictionaries are not shared
between instances of the &lt;cite&gt;cache&lt;/cite&gt; decorator, it is appended to the
&lt;cite&gt;test_cache&lt;/cite&gt; test&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Check that the vals dict isn&amp;#39;t shared between other decor&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;other fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Create other wrapped function&lt;/span&gt;
&lt;span class="n"&gt;other_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# The original function has not have been additionally called, its&lt;/span&gt;
&lt;span class="c"&gt;# call count remains 2&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All suggested tips on decorators very welcome - just message in the&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Migrating from Django 1.4 to 1.5 - Lessons learned</title><link href="/migrating-from-django-14-to-15-lessons-learned.html" rel="alternate"></link><updated>2013-03-29T19:00:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-03-29:migrating-from-django-14-to-15-lessons-learned.html</id><summary type="html">&lt;p&gt;From &lt;a class="reference external" href="https://twitter.com/ryankask/"&gt;Ryan Kaskel&lt;/a&gt;&amp;#8216;s talk at &lt;a class="reference external" href="http://www.meetup.com/The-London-Django-Meetup-Group/"&gt;Django London&lt;/a&gt; in November last year, I guessed that upgrading the &lt;a class="reference external" href="https://github.com/jamescooke/actionguide"&gt;Action Guide code&lt;/a&gt; from Django 1.4 to 1.5 might have created some issues with users (&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/releases/1.5/#configurable-user-model"&gt;user models have changed in Django 1.5 to allow more customisation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, as it turns out, the main problems were with settings and urls, the users were fine. My main take-aways&amp;nbsp;were:&lt;/p&gt;
&lt;div class="section" id="url-formats-have-changed-now-need-quotes"&gt;
&lt;h2&gt;Url formats have changed - now need&amp;nbsp;quotes&lt;/h2&gt;
&lt;p&gt;The Django team had already updated the &lt;cite&gt;url&lt;/cite&gt; tag to accept the path parameter as a string, but the old syntax was still allowed. 1.4 allowed both types of syntax, the team having provided &lt;cite&gt;{% load url from future %}&lt;/cite&gt; for those that wanted to update their templates to the new&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the warning from the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/templates/builtins/#std:templatetag-url"&gt;&lt;span class="caps"&gt;URL&lt;/span&gt; tag documentation&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="|filename|/images/url-warning.png" src="/static/images/url-warning.png" /&gt;
&lt;p&gt;This was a reasonably easy change to implement - some search and replace and all &lt;cite&gt;url&lt;/cite&gt; tags can be easily hunted down and&amp;nbsp;changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="read-up-on-the-settings-no-allowed-hosts-makes-500s"&gt;
&lt;h2&gt;Read up on the settings - no ALLOWED_HOSTS makes&amp;nbsp;500s&lt;/h2&gt;
&lt;p&gt;This was the real&amp;nbsp;killer.&lt;/p&gt;
&lt;p&gt;There is a &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts"&gt;new ALLOWED_HOSTS settings in 1.5&lt;/a&gt; required to get Django and running in non-debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;Worst thing about the implementation of this new setting is that I couldn&amp;#8217;t get a single bit of debugging output it through &lt;cite&gt;wsgi&lt;/cite&gt; on WebFaction - just a 500 error on every page load when I took the site out of debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;I was so confused that I posted &lt;a class="reference external" href="http://stackoverflow.com/questions/15605185/django-1-5-url-deprecation-warning-causes-500-error-in-webfaction-apache-wsgi/15626247"&gt;this question on StackOverflow&lt;/a&gt;, thinking the problem was &lt;cite&gt;url&lt;/cite&gt; warnings being shown as errors and halting the &lt;cite&gt;wsgi&lt;/cite&gt;. In the end, just adding &lt;cite&gt;ALLOWED_HOSTS&lt;/cite&gt; fixed everything up&amp;nbsp;great.&lt;/p&gt;
&lt;p&gt;My main problem was that I scanned the docs, tested the migration on localhost in dev mode, and just expected everything to deploy. With Captain Hindsight, I&amp;#8217;d have RTFMed much harder before deploying - a lesson for the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Apart from that, everything works really well. &lt;strong&gt;Have&amp;nbsp;fun!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category></entry><entry><title>Pelican Svbtle theme tweaks</title><link href="/pelican-svbtle-theme-tweaks.html" rel="alternate"></link><updated>2013-02-21T19:40:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-02-21:pelican-svbtle-theme-tweaks.html</id><summary type="html">&lt;p&gt;My first experiments with &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to run this blog have been good - it&amp;#8217;s a great way to publish static pages quickly and I find it much easier to manage than&amp;nbsp;Octopress.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s built on a version of the &lt;a class="reference external" href="https://github.com/wting/pelican-svbtle"&gt;Pelican-svbtle theme&lt;/a&gt;. There were some problems with the theme in its current form, so I&amp;#8217;ve forked &lt;a class="reference external" href="https://github.com/CNBorn/pelican-svbtle"&gt;CNBorn&amp;#8217;s already adjusted version&lt;/a&gt; and cleaned out some of the &lt;span class="caps"&gt;LESS&lt;/span&gt; and templates - &lt;a class="reference external" href="https://github.com/jamescooke/pelican-svbtle"&gt;my fork is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, this theme isn&amp;#8217;t going to stay. &lt;a class="reference external" href="http://www.thesocialspaces.co.uk/"&gt;Paul&lt;/a&gt; has been working on some flat &lt;span class="caps"&gt;HTML&lt;/span&gt; based on Bootstrap to make a new clean theme. Once that&amp;#8217;s stable, I&amp;#8217;ll plug in some Pelican / Jinja2 tags and hopefully this site will have a new clean theme&amp;nbsp;soon.&lt;/p&gt;
</summary><category term="github"></category><category term="python"></category><category term="pelican"></category><category term="theme"></category></entry><entry><title>Got the Stack Overflow tumbleweed badge for Mako filters question</title><link href="/got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html" rel="alternate"></link><updated>2013-01-20T16:40:00+05:30</updated><author><name>Piyush</name></author><id>tag:,2013-01-20:got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html</id><summary type="html">&lt;p&gt;Last week I posted a question on Stack Overflow - &amp;#8220;&lt;a class="reference external" href="http://stackoverflow.com/questions/14215591/mako-template-filter-ordering"&gt;Mako template filter ordering&lt;/a&gt;&amp;#8221; - this week it earned the &lt;a class="reference external" href="http://stackoverflow.com/badges/63/tumbleweed"&gt;Tumbleweed badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s always a little concerning when libraries and toolkits you&amp;#8217;re using in a project have forums and message boards that are a little too quiet - is there a bad smell? Is there something bad I don&amp;#8217;t know about this tech? Even worse is when you look around those quiet forums (or tags in Stack Overflow) you find comments like this about the library you&amp;#8217;re being asked to&amp;nbsp;use:&lt;/p&gt;
&lt;img alt="|filename|/images/mako.png" src="/static/images/mako.png" /&gt;
&lt;p&gt;You should listen to a &lt;a class="reference external" href="http://stackoverflow.com/questions/10870379/is-there-an-equivalent-to-django-template-filters-in-mako"&gt;Stack Overflow moderator who has 93K points&lt;/a&gt; at time of writing&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Meanwhile&amp;#8230; I haven&amp;#8217;t found the reason for the template filter ordering being strange - and I still think that the &lt;tt class="docutils literal"&gt;h&lt;/tt&gt; filter is putting itself last in the mako render order, but now I&amp;#8217;ve got a work around, I&amp;#8217;m going back to post&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Maybe 10 more people will see it before Easter - it might even help&amp;nbsp;someone.&lt;/p&gt;
</summary><category term="mako"></category><category term="python"></category></entry></feed>